// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum OrderEventStatus {
  PENDING
  ACCEPTED
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}

model User {
  id                     Int        @id @default(autoincrement())
  name                   String
  email                  String
  password               String
  role                   Role       @default(USER)
  addresses              Address[]
  defaultShippingAddress Int?
  defaultBillingAddress  Int?
  cartItems              cartItem[]
  Order                  Order[]
  createdAt              DateTime   @default(now())
  updatedAt              DateTime   @updatedAt


  @@map("users")
}

model Address {
  id        Int      @id @default(autoincrement())
  lineOne   String
  lineTwo   String?
  city      String
  country   String
  pincode   String
  userID    Int
  user      User     @relation(fields: [userID], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("addresses")
}

model Product {
  id          Int        @id @default(autoincrement())
  name        String
  description String     @db.Text
  price       Decimal
  tags        String
  cartItems   cartItem[]
  orders     OrderProduct[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("products")
}

model cartItem {
  id        Int      @id @default(autoincrement())
  userID    Int
  user      User     @relation(fields: [userID], references: [id])
  productID Int
  product   Product  @relation(fields: [productID], references: [id])
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cart_items")
}

model Order {
  id        Int      @id @default(autoincrement())
  userID    Int
  user      User     @relation(fields: [userID], references: [id])
  netAmount Decimal
  address String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  products OrderProduct[]
  events OrderEvent[]
  status OrderEventStatus @default(PENDING)

  @@map("orders")
}

model OrderProduct {
  id        Int      @id @default(autoincrement())
  orderID   Int
  order     Order    @relation(fields: [orderID], references: [id])
  productID Int
  product   Product  @relation(fields: [productID], references: [id])
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order_products")
}

model OrderEvent {
  id        Int      @id @default(autoincrement())
  orderID   Int
  order     Order    @relation(fields: [orderID], references: [id])
  status  OrderEventStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order_events")
}